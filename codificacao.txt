MSB b14                 LSB b0
        |             |

NOP:    0000_000_000_00000
ADD:    1000_ddd_sss_xxxxx
SUB:    1001_ddd_sss_xxxxx
SUBI:   0001_ddd_ccc_ccccc
MOV:    1101_ddd_sss_xxxxx
LI:     0101_ddd_ccc_ccccc
JUMP:   0111_000_ccc_ccccc  //agr tem 000 - func3 = 000
CMPI:   1111_xxx_ccc_ccccc
BCC:    0111_001_ccc_ccccc  // func3 = 001 // pula quando o carry = 0
BNE:    0100_010_ccc_ccccc
LW:     1110_ddd_sss_xxxxx  
SW:     0010_ddd_sss_xxxxx
AND:    0011_ddd_sss_xxxxx

- abaixo ainda não precisa para o lab5 (refletir) (Talvez usar algo nos xxx antes das constantes para ser um funct3?)
OR:     1110_ddd_sss_xxxxx




onde
ddd identifica o registrador destino
sss identifica o registrador fonte
ccccc identifica a constante de 5 bits em complemento de 2
xxxx é irrelevante



OPCODE (INICIALMENTE)
MSB 1 -> operações entre registradores
MSB 0 -> operações com constantes/imediato
Outros 3 -> opcode da ULA / ou outra coisa



Auxiliar:
{'Acumulador ou não': 'ULA com acumulador',
 'Largura da ROM / instrução em bits': [15],
 'Número de registradores no banco': [7], -> 111 representa acumulador (A)
 'ADD ops': 'ADD com dois operandos apenas',
 'Carga de constantes': 'Carrega diretamente com LD sem somar',
 'SUB ops': 'Subtração com dois operandos apenas',
 'ADD ctes': 'ADD apenas entre registradores, nunca com constantes',
 'SUB ctes': 'Há instrução que subtrai uma constante',
 'Subtração': 'Subtração com SUB sem borrow',
 'Comparações': 'Comparação apenas com CMPI', -> Comparação com constante
 'Saltos condicionais': ['BNE', 'BCC'],
 'Saltos': 'Incondicional é absoluto e condicional é relativo',
 'Validação -- final do loop': 'Detecção do MSB setado usando AND',
 'Validação -- complicações': 'Exceção endereço inválido RAM'}

